ARG NODE_VERSION=20
FROM node:${NODE_VERSION}-alpine AS base

LABEL maintainer="votre-email@example.com"
LABEL description="NestJS API with MongoDB, Redis, Supabase"
LABEL version="1.0.0"

RUN apk add --no-cache \
    dumb-init \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001 -G nodejs

ENV TZ=Europe/Paris
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Variables d'environnement
ENV NODE_ENV=production
ENV NPM_CONFIG_LOGLEVEL=warn
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false

WORKDIR /usr/src/app

FROM base AS dependencies

RUN npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fetch-retries 3

COPY package*.json ./
COPY yarn.lock* ./

RUN --mount=type=cache,target=/root/.npm \
    --mount=type=cache,target=/root/.yarn \
    if [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile --production=false; \
    else \
        npm ci --include=dev; \
    fi

FROM dependencies AS build

COPY . .

RUN npm run build

RUN --mount=type=cache,target=/root/.npm \
    if [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile --production=true && yarn cache clean; \
    else \
        npm ci --omit=dev && npm cache clean --force; \
    fi

FROM base AS production

RUN apk add --no-cache curl

COPY --from=build --chown=nestjs:nodejs /usr/src/app/dist ./dist
COPY --from=build --chown=nestjs:nodejs /usr/src/app/node_modules ./node_modules
COPY --from=build --chown=nestjs:nodejs /usr/src/app/package*.json ./


RUN mkdir -p uploads logs tmp && \
    chown -R nestjs:nodejs uploads logs tmp

USER nestjs

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Exposition du port
EXPOSE 3000

# Point d'entrée avec dumb-init pour gestion signaux
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main"]

FROM dependencies AS development

RUN apk add --no-cache git

ENV NODE_ENV=development


COPY . .

RUN chown -R nestjs:nodejs /usr/src/app

USER nestjs

# Health check pour développement
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

EXPOSE 3000
EXPOSE 9229

CMD ["npm", "run", "start:dev"]


FROM dependencies AS test

COPY . .

ENV NODE_ENV=test

USER nestjs

CMD ["npm", "run", "test"]