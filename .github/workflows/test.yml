name: Backend Tests CI

on:
  pull_request:
    branches: [ develop ]
  push:
    branches: [ develop ]

permissions:
  contents: read

concurrency:
  group: backend-ci-develop-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      mongodb:
        image: mongo:7
        ports: [ "27017:27017" ]
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: snapybara_test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7-alpine
        ports: [ "6379:6379" ]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit (lenient on PR)
        if: github.event_name == 'pull_request'
        run: npm audit --audit-level=moderate || true

      - name: Security audit (strict on push)
        if: github.event_name == 'push'
        run: npm audit --audit-level=moderate

      - name: Type check
        run: npm run type-check

      - name: Lint (errors only)
        run: npm run lint:errors

      - name: Unit tests (with coverage)
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/snapybara_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-key
          SUPABASE_JWT_SECRET: test-jwt-secret
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret
          CI: "true"
        run: |
          npm test -- --coverage --passWithNoTests --coverageThreshold='{"global":{}}'
          # (Optionnel) produire un rapport JUnit
          if [ -f junit.xml ]; then mkdir -p test-results && mv junit.xml test-results/; fi

      - name: E2E tests
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/snapybara_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-key
          SUPABASE_JWT_SECRET: test-jwt-secret
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret
          CI: "true"
        run: npm run test:e2e -- --passWithNoTests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: SnapyBara/snapybara-back
          directory: ./coverage
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Archive test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            coverage
            test-results

  build:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Check build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi
          echo "Build successful"

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: snapybara-back:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm snapybara-back:test node --version
          docker run --rm snapybara-back:test npm --version
