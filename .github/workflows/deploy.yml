name: Deploy to Render

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests Before Deploy

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: snapybara_test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm install

    - name: Check types
      run: npm run type-check

    - name: Run linter (errors only)
      run: npm run lint:errors

    - name: Run unit tests
      run: npm test -- --coverage --passWithNoTests --coverageThreshold='{"global":{}}'
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/snapybara_test?authSource=admin
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        SUPABASE_URL: https://test.supabase.co
        SUPABASE_ANON_KEY: test-anon-key
        SUPABASE_SERVICE_ROLE_KEY: test-service-key
        SUPABASE_JWT_SECRET: test-jwt-secret
        GOOGLE_CLIENT_ID: test-client-id
        GOOGLE_CLIENT_SECRET: test-client-secret

    - name: Run E2E tests
      run: npm run test:e2e -- --passWithNoTests
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/snapybara_test?authSource=admin
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        SUPABASE_URL: https://test.supabase.co
        SUPABASE_ANON_KEY: test-anon-key
        SUPABASE_SERVICE_ROLE_KEY: test-service-key
        SUPABASE_JWT_SECRET: test-jwt-secret
        GOOGLE_CLIENT_ID: test-client-id
        GOOGLE_CLIENT_SECRET: test-client-secret

    - name: Build application
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to Render
    # Only deploy when PR is merged (push to main)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        # Trigger deploy on Render
        curl -X POST \
          -H "Accept: application/json" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys \
          -d '{"clearCache": false}'

    - name: Notify deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? '✅ Deployment triggered' : '❌ Failed to trigger deployment';
          const message = `### Render Deployment Status\n\n${status}`;
          
          // Comment on the PR if this was triggered by a PR merge
          const prNumber = context.payload.pull_request?.number;
          if (prNumber) {
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          }
